name: CI/CD and Security Scanning

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  create_cache:
    name: Cache Node.js Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: yarn install

  gitleaks:
    name: Detect Secret Leaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Gitleaks Secret Detection
        uses: zricethezav/gitleaks@v8.11.0
        with:
          config: ".github/gitleaks/gitleaks.toml" # Optional: Use custom config
          source: "."
          verbose: true
          report-path: gitleaks-report.json

  yarn_test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: create_cache
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn install
      - name: Run Tests
        run: yarn test

  build_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: yarn_test
    permissions:
      contents: read # Needed for actions/checkout to access the repo
      packages: write # Allows pushing Docker images
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    env:
      IMAGE_NAME: sirlawdin/juice-shop-app
      IMAGE_TAG: juice-shop-1.1
      DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASS: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PASS }}
      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
      - name: Push Docker Image
        run: |
          docker push $IMAGE_NAME:$IMAGE_TAG

  guarddog:
    name: Scan Dependencies with GuardDog
    runs-on: ubuntu-latest
    needs: yarn_test
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install GuardDog
        run: pip install guarddog
      - name: Verify Dependencies
        run: guarddog pypi verify requirements.txt --output-format sarif --exclude-rules repository_integrity_mismatch > guarddog.sarif
      - name: Upload SARIF file to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          category: guarddog-builtin
          sarif_file: guarddog.sarif
